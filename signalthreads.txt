#include <pthread.h>
#include <stdbool.h>

// Global flag for thread shutdown
volatile bool keepRunning = true;

// Example thread function
void* threadFunction(void* arg) {
    while (keepRunning) {
        // Perform work here
        // Check for shutdown signal periodically
    }
    // Cleanup and exit
    return NULL;
}

// Function to signal thread to stop and wait for it to finish
void stopThread(pthread_t thread) {
    // Signal thread to stop
    keepRunning = false;
    // Wait for thread to exit
    pthread_join(thread, NULL);
}

// Shutdown function
int zcs_shutdown() {
    // Signal all threads to stop
    if (zcs_node.type == ZCS_SERVICE_TYPE) {
        stopThread(*heartbeatThread);
        free(heartbeatThread);
        stopThread(*notificationThread);
        free(notificationThread);
    } else if (zcs_node.type == ZCS_APP_TYPE) {
        stopThread(*appThread);
        free(appThread);
        stopThread(*listenAdThread);
        free(listenAdThread);
    }
    // Continue with the rest of the shutdown process...
}
